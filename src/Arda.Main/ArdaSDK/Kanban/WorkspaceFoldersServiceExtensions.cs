// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ArdaSDK.Kanban
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WorkspaceFoldersService.
    /// </summary>
    public static partial class WorkspaceFoldersServiceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='folderId'>
            /// </param>
            /// <param name='archived'>
            /// </param>
            public static IList<WorkspaceItem> ListItems(this IWorkspaceFoldersService operations, string folderId, bool? archived = default(bool?))
            {
                return operations.ListItemsAsync(folderId, archived).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='folderId'>
            /// </param>
            /// <param name='archived'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WorkspaceItem>> ListItemsAsync(this IWorkspaceFoldersService operations, string folderId, bool? archived = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListItemsWithHttpMessagesAsync(folderId, archived, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='folderId'>
            /// </param>
            /// <param name='workloadInput'>
            /// </param>
            public static void AddItem(this IWorkspaceFoldersService operations, string folderId, AddItemInput workloadInput = default(AddItemInput))
            {
                operations.AddItemAsync(folderId, workloadInput).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='folderId'>
            /// </param>
            /// <param name='workloadInput'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddItemAsync(this IWorkspaceFoldersService operations, string folderId, AddItemInput workloadInput = default(AddItemInput), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddItemWithHttpMessagesAsync(folderId, workloadInput, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
